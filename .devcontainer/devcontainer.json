{
    "name": "Legal AI Toolkit - Superintelligent Development Environment",
    "dockerComposeFile": "../docker-compose.dev.yml",
    "service": "development",
    "workspaceFolder": "/workspace",
    "shutdownAction": "stopCompose",
    
    "features": {
        "ghcr.io/devcontainers/features/common-utils:2": {
            "installZsh": true,
            "configureZshAsDefaultShell": true,
            "installOhMyZsh": true,
            "upgradePackages": true
        },
        "ghcr.io/devcontainers/features/git:1": {
            "ppa": true,
            "version": "latest"
        },
        "ghcr.io/devcontainers/features/docker-in-docker:2": {
            "version": "latest",
            "enableNonRootDocker": true
        }
    },

    "customizations": {
        "vscode": {
            "extensions": [
                "rust-lang.rust-analyzer",
                "tauri-apps.tauri-vscode",
                "svelte.svelte-vscode",
                "bradlc.vscode-tailwindcss",
                "ms-python.python",
                "ms-python.flake8",
                "ms-python.black-formatter",
                "GitHub.copilot",
                "ms-vscode.vscode-typescript-next",
                "esbenp.prettier-vscode",
                "formulahendry.auto-rename-tag",
                "ms-vscode.vscode-json",
                "redhat.vscode-yaml",
                "ms-vscode.vscode-eslint",
                "streetsidesoftware.code-spell-checker",
                "usernamehw.errorlens",
                "vadimcn.vscode-lldb",
                "serayuzgur.crates",
                "fill-labs.dependi"
            ],
            "settings": {
                "terminal.integrated.defaultProfile.linux": "zsh",
                "terminal.integrated.profiles.linux": {
                    "zsh": {
                        "path": "/bin/zsh"
                    }
                },
                "rust-analyzer.cargo.buildScripts.enable": true,
                "rust-analyzer.procMacro.enable": true,
                "rust-analyzer.diagnostics.enable": true,
                "python.defaultInterpreterPath": "/usr/local/bin/python3",
                "python.formatting.provider": "black",
                "python.linting.enabled": true,
                "python.linting.flake8Enabled": true,
                "editor.formatOnSave": true,
                "editor.codeActionsOnSave": {
                    "source.fixAll.eslint": true
                },
                "files.watcherExclude": {
                    "**/target/**": true,
                    "**/node_modules/**": true,
                    "**/.git/objects/**": true,
                    "**/.git/subtree-cache/**": true,
                    "**/dist/**": true
                }
            }
        }
    },

    "forwardPorts": [
        3000,
        3001,
        5173,
        8000,
        1420,
        5001,
        4001,
        8080,
        9090
    ],
    "portsAttributes": {
        "3000": {
            "label": "Tauri Dev Server",
            "onAutoForward": "notify"
        },
        "3001": {
            "label": "Web Portal Frontend",
            "onAutoForward": "notify"
        },
        "5173": {
            "label": "Svelte Dev Server",
            "onAutoForward": "notify"
        },
        "8000": {
            "label": "FastAPI Backend",
            "onAutoForward": "notify"
        },
        "1420": {
            "label": "Tauri IPC",
            "onAutoForward": "silent"
        },
        "5001": {
            "label": "IPFS API",
            "onAutoForward": "silent"
        },
        "4001": {
            "label": "IPFS Swarm",
            "onAutoForward": "silent"
        },
        "8080": {
            "label": "IPFS Gateway",
            "onAutoForward": "silent"
        },
        "9090": {
            "label": "Vector DB",
            "onAutoForward": "silent"
        }
    },

    "postCreateCommand": "bash .devcontainer/post-create.sh",
    "postStartCommand": "bash .devcontainer/post-start.sh",

    "remoteUser": "vscode",
    "containerUser": "vscode",

    "mounts": [
        "source=/var/run/docker.sock,target=/var/run/docker-host.sock,type=bind",
        "source=${localWorkspaceFolder}/.devcontainer/scripts,target=/workspace/.devcontainer/scripts,type=bind"
    ],

    "runArgs": [
        "--security-opt", "seccomp:unconfined",
        "--cap-add=SYS_PTRACE",
        "--privileged"
    ]
}