version: '3.8'

services:
  # Production PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: legal_toolkit_db_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./web-portal/backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - legal_toolkit_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Production Redis Cache
  redis:
    image: redis:7-alpine
    container_name: legal_toolkit_redis_prod
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
    networks:
      - legal_toolkit_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Production FastAPI Backend
  backend:
    build:
      context: ./web-portal/backend
      dockerfile: Dockerfile.prod
    container_name: legal_toolkit_backend_prod
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      SECRET_KEY: ${SECRET_KEY}
      DEVELOPMENT_MODE: "false"
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - legal_toolkit_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Production Svelte Frontend
  frontend:
    build:
      context: ./web-portal/frontend
      dockerfile: Dockerfile.prod
    container_name: legal_toolkit_frontend_prod
    environment:
      PUBLIC_API_URL: ${PUBLIC_API_URL}
      PUBLIC_STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
    networks:
      - legal_toolkit_network
    restart: unless-stopped

  # Production Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: legal_toolkit_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - legal_toolkit_network
    restart: unless-stopped

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  nginx_logs:
    driver: local

networks:
  legal_toolkit_network:
    driver: bridge